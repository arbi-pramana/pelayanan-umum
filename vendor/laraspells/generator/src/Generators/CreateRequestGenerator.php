<?php

namespace LaraSpells\Generator\Generators;

use LaraSpells\Generator\Schema\Table;
use LaraSpells\Generator\Traits\Concerns\TableUtils;

class CreateRequestGenerator extends ClassGenerator
{

    use Concerns\TableUtils;

    public function __construct(Table $tableSchema)
    {
        $this->setClassName($tableSchema->getCreateRequestClass());
        $this->tableSchema = $tableSchema;
        $this->initClass();
        $this->addMethodsFromReflection();
    }

    protected function initClass()
    {
        $data = $this->getTableData();
        $fillables = $this->tableSchema->getFillableColumns();
        $this->setParentClass('Illuminate\Foundation\Http\FormRequest');
        $this->setDocblock(function($docblock) use ($data) {
            $authorName = $this->tableSchema->getRootSchema()->getAuthorName();
            $authorEmail = $this->tableSchema->getRootSchema()->getAuthorEmail();
            $docblock->addText("Generated by LaraSpells");
            $docblock->addAnnotation("author", "{$authorName} <{$authorEmail}>");
            $docblock->addAnnotation("created", date('r'));
        });
    }

    protected function setMethodAuthorize(MethodGenerator $method)
    {
        $method->setDocblock(function($docblock) {
            $docblock->addText("Determine if the user is authorized to make this request.");
            $docblock->setReturn('bool');
        });

        $method->appendCode("return true;");
    }

    protected function setMethodRules(MethodGenerator $method)
    {
        $rules = $this->getRules();
        $method->setDocblock(function($docblock) {
            $docblock->addText("Get the validation rules that apply to the request.");
            $docblock->setReturn('array');
        });

        $method->appendCode("return ".$this->phpify($rules, true).";");
    }

    protected function getRules()
    {
        $rules = [];
        $fields = $this->tableSchema->getFields();
        foreach($fields as $field) {
            $fieldRules = $field->getRules();
            if ($fieldRules) {
                $rules[$field->getColumnName()] = implode("|", $fieldRules);
            }
        }
        return $rules;
    }

    protected function getTableSchema()
    {
        return $this->tableSchema;
    }

}
