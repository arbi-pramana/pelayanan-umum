<?php

namespace LaraSpells\Generator\Generators;

use LaraSpells\Generator\Schema\Field;
use LaraSpells\Generator\Schema\Table;
use LaraSpells\Generator\Traits\Concerns\TableUtils;

class MigrationGenerator extends ClassGenerator
{
    use Concerns\TableUtils;

    public function __construct(Table $tableSchema)
    {
        parent::__construct($tableSchema->getMigrationClass());
        $this->tableSchema = $tableSchema;
        $this->initClass();
        $this->addMethodsFromReflection();
    }

    protected function getTableSchema()
    {
        return $this->tableSchema;
    }

    protected function initClass()
    {
        $data = $this->getTableData();
        $table = $data->table_name;
        $fillables = $this->getTableSchema()->getFillableColumns();
        $searchables = array_values(array_map(function($field) {
            return $field->getColumnName();
        }, $this->getTableSchema()->getSearchableFields()));

        $this->setParentClass('Illuminate\Database\Migrations\Migration');
        $this->useClass('Illuminate\Support\Facades\Schema');
        $this->useClass('Illuminate\Database\Schema\Blueprint');

        $this->setDocblock(function($docblock) use ($data) {
            $authorName = $this->getTableSchema()->getRootSchema()->getAuthorName();
            $authorEmail = $this->getTableSchema()->getRootSchema()->getAuthorEmail();
            $docblock->addText("Generated by LaraSpells");
            $docblock->addAnnotation("author", "{$authorName} <{$authorEmail}>");
            $docblock->addAnnotation("created", date('r'));
        });
    }

    protected function setMethodUp(MethodGenerator $method)
    {
        $data = $this->getTableData();
        $columns = $this->getColumnDefinitions();
        $method->setDocblock(function($docblock) use ($data) {
            $docblock->addText('Run the migrations.');
        });

        $method->appendCode("
            Schema::create('{$data->table_name}', function (Blueprint \$table) {
                ".implode("\n\r\t", $columns)."
            });
        ");
    }

    protected function setMethodDown(MethodGenerator $method)
    {
        $data = $this->getTableData();
        $method->setDocblock(function($docblock) use ($data) {
            $docblock->addText('Reverse the migrations.');
        });

        $method->appendCode("
            Schema::dropIfExists('{$data->table_name}');
        ");
    }

    protected function getColumnDefinitions()
    {
        $schema = $this->tableSchema;
        $fields = $schema->getFields();
        $columns = [];
        $usingTimestamps = $schema->usingTimestamps();
        $usingSoftDelete = $schema->usingSoftDelete();

        foreach($fields as $field) {
            $index = $field->getIndex();
            $column = $field->getColumnName();
            $autoIncrement = $field->isAutoincrement();
            $nullable = $field->isNullable();
            $primary = $field->isPrimary();
            $unique = $index == Field::INDEX_UNIQUE;
            $indexed = $index == Field::INDEX_BASIC;
            $description = $field->getDescription();
            $defaultValue = $field->getDefaultValue();
            list($method, $params) = $this->parseMethodAndParams($field);
            array_unshift($params, $column);
            $args = array_map(function($param) {
                return $this->phpify($param);
            }, $params);
            $code = "\$table->{$method}(".implode(', ', $args).")";
            if ($primary AND !$autoIncrement) $code .= "->primary()";
            if ($unique) $code .= "->unique()";
            if ($indexed) $code .= "->index()";
            if ($nullable) $code .= "->nullable()";
            if ($field->has('default')) $code .= "->default(".$this->phpify($defaultValue).")";
            if ($description) $code .= "->comment('".addslashes($description)."')";
            $code .= ";";

            $columns[] = $code;
        }
        if ($usingTimestamps) {
            $columns[] = "\$table->timestamps();";
        }
        if ($usingSoftDelete) {
            $columns[] = "\$table->softDeletes();";
        }

        return $columns;
    }

    protected function parseMethodAndParams(Field $field)
    {
        $exp = explode(':', $field->getType(), 2);
        $type = $exp[0];
        $params = isset($exp[1])? explode(',', $exp[1]) : [];
        $method = camel_case($type);
        $autoIncrement = $field->isAutoincrement();
        if ($autoIncrement) {
            if ($method == 'integer') $method = 'increments';
            if ($method == 'smallInteger') $method = 'smallIncrements';
            if ($method == 'mediumInteger') $method = 'mediumIncrements';
            if ($method == 'bigInteger') $method = 'bigIncrements';
        }
        if ($type == 'enum') {
            $params = [$params];
        }
        if ($type == 'string' AND $field->getLength()) {
            $params[] = $field->getLength();
        }
        if (in_array($type, ['decimal', 'float'])) {
            $params = array_map(function($param) {
                return (int) $param;
            }, $params);
        }

        return [$method, $params];
    }

}
