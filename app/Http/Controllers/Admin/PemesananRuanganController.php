<?php

namespace App\Http\Controllers\Admin;

use App\Models\Ruang;
use App\Models\Karyawan;
use App\Models\Notification;
use Illuminate\Http\Request;
use App\Models\PemesananRuangan;
use LaraSpells\FormModel\FormModel;
use App\Http\Controllers\Controller;

/**
 * Generated by LaraSpell
 *
 * @author  Ditama Digital <info@ditamadigtal.co.id>
 * @created Wed, 06 Jun 2018 09:10:06 +0000
 */
class PemesananRuanganController extends Controller
{

    /**
     * Pemesanan ruangan model
     *
     * @var App\Models\PemesananRuangan
     */
    protected $pemesananRuangan;
    protected $ruang;
    protected $karyawan;

    /**
     * Constructor
     *
     * @param  App\Models\PemesananRuangan $pemesananRuangan
     * @return void
     */
    public function __construct(PemesananRuangan $pemesananRuangan, Ruang $ruang, Karyawan $karyawan)
    {
        $this->pemesananRuangan = $pemesananRuangan;
        $this->ruang = $ruang;
        $this->karyawan = $karyawan;
    }

    /**
     * Display list pemesanan_ruangan
     *
     * @param  Illuminate\Http\Request $request
     * @return Illuminate\Http\Response
     */
    public function pageList(Request $request)
    {
        $limit = (int) $request->get('limit') ?: 10;
        $keyword = $request->get('keyword');

        $query = $this->pemesananRuangan->query();
        $query->select([
            "id",
            "no_pemesanan_ruangan",
            "tanggal",
            "nama_acara",
            "pemohon",
            "waktu_awal",
            "waktu_akhir",
            "jumlah_peserta",
            "id_ruang",
            "attachment",
            "keterangan",
            "status_supervisor",
            "status_manajer",
            "status_pj"
        ]);

        if ($keyword) {
            $query->where(function ($query) use ($keyword) {
                $query->where('no_pemesanan_ruangan', 'like', "%{$keyword}%");
                $query->orWhere('tanggal', 'like', "%{$keyword}%");
                $query->orWhere('nama_acara', 'like', "%{$keyword}%");
                $query->orWhere('pemohon', 'like', "%{$keyword}%");
                $query->orWhere('jam_awal', 'like', "%{$keyword}%");
                $query->orWhere('jam_akhir', 'like', "%{$keyword}%");
                $query->orWhere('jumlah_peserta', 'like', "%{$keyword}%");
                $query->orWhere('id_ruang', 'like', "%{$keyword}%");
                $query->orWhere('penanggung_jawab', 'like', "%{$keyword}%");
                $query->orWhere('file_layout', 'like', "%{$keyword}%");
                $query->orWhere('keterangan', 'like', "%{$keyword}%");
                $query->orWhere('status_pj', 'like', "%{$keyword}%");
                $query->orWhere('status_manajer', 'like', "%{$keyword}%");
                $query->orWhere('status_supervisor', 'like', "%{$keyword}%");
            });
        }

        $data['title'] = 'List Pemesanan Ruangan';
        $data['pagination'] = $query->latest()->paginate($limit);

        return view('admin::pemesanan_ruangan.page-list', $data);
    }

    /**
     * Show detail pemesananRuangan
     *
     * @param  Illuminate\Http\Request $request
     * @param  string $id
     * @return Illuminate\Http\Response
     */
    public function pageDetail(Request $request, $id)
    {
        $pemesananRuangan = $this->findOrFail($id);

        $notif = Notification::where('pemesanan_ruangan_id',$pemesananRuangan->id)->first();
        $notif->status = true;
        $notif->save();
        
        $data['title'] = 'Detail Pemesanan Ruangan';
        $data['pemesananRuangan'] = $pemesananRuangan;

        return view('admin::pemesanan_ruangan.page-detail', $data);
    }

    /**
     * Display form create pemesananRuangan
     *
     * @param  Illuminate\Http\Request $request
     * @return Illuminate\Http\Response
     */
    public function formCreate(Request $request)
    {
        $data['title'] = 'Form Create Pemesanan Ruangan';
        $data['form'] = $this->form(new PemesananRuangan)->withAction(route('admin::pemesanan-ruangan.post-create'));

        return view('admin::pemesanan_ruangan.form-create', $data);
    }

    /**
     * Insert new pemesananRuangan
     *
     * @param  Illuminate\Http\Request $request
     * @return Illuminate\Http\Response
     */
    public function postCreate(Request $request)
    {
        
        $this->form(new PemesananRuangan)->submit($request);

        $message = 'Pemesanan Ruangan has been created!';
        return redirect()->route('admin::pemesanan-ruangan.page-list')->with('info', $message);
    }

    /**
     * Display form edit pemesananRuangan
     *
     * @param  Illuminate\Http\Request $request
     * @param  string $id
     * @return Illuminate\Http\Response
     */
    public function formEdit(Request $request, $id)
    {
        $pemesananRuangan = $this->findOrFail($id);
        $pemesananRuangan['waktu_awal'] = date('H:i',$pemesananRuangan->waktu_awal);
        $pemesananRuangan['waktu_akhir'] = date('H:i',$pemesananRuangan->waktu_akhir);
        // dd($pemesananRuangan);
        
        
        $data['title'] = 'Form Edit Pemesanan Ruangan';
        $data['form'] = $this->form($pemesananRuangan)->withAction(route('admin::pemesanan-ruangan.post-edit', [$id]));

        return view('admin::pemesanan_ruangan.form-edit', $data);
    }

    /**
     * Update specified pemesananRuangan
     *
     * @param  Illuminate\Http\Request $request
     * @param  string $id
     * @return Illuminate\Http\Response
     */
    public function postEdit(Request $request, $id)
    {
        $pemesananRuangan = $this->findOrFail($id);
        $request['waktu_awal'] = strtotime($request->waktu_awal);
        $request['waktu_akhir'] = strtotime($request->waktu_akhir);
        $this->form($pemesananRuangan)->submit($request);

        $message = 'Pemesanan Ruangan has been updated!';
        return redirect()->route('admin::pemesanan-ruangan.page-list')->with('info', $message);
    }

    /**
     * Delete specified pemesananRuangan
     *
     * @param  Illuminate\Http\Request $request
     * @param  string $id
     * @return Illuminate\Http\Response
     */
    public function delete(Request $request, $id)
    {
        $pemesananRuangan = $this->findOrFail($id);

        // Delete data
        $deleted = $pemesananRuangan->delete();
        if (!$deleted) {
            $message = 'Something went wrong when delete Pemesanan Ruangan';
            return back()->with('danger', $message);
        }

        $notif = Notification::where('pemesanan_ruangan_id',$id)->first();
        $notif->delete();

        $message = 'Pemesanan Ruangan has been deleted!';
        return redirect()->route('admin::pemesanan-ruangan.page-list')->with('info', $message);
    }

    /**
     * Find pemesananRuangan by 'id' or display 404 if not exists
     *
     * @return Illuminate\Http\Response
     */
    protected function findOrFail($id)
    {
        $pemesananRuangan = $this->pemesananRuangan->find($id);
        if (!$pemesananRuangan) {
            return abort(404, 'Pemesanan Ruangan not found');
        }

        return $pemesananRuangan;
    }

    public function approve($id)
    {
        \DB::table('pemesanan_ruangan')
            ->where('id', '=', $id)
            ->update(['status_pj' => 'Approved']);

        $notif = Notification::where('pemesanan_ruangan_id',$id)->first();
        $notif->status = true;
        $notif->save();
        
        return redirect('admin/pemesanan-ruangan');
    }

    public function reject($id)
    {
        \DB::table('pemesanan_ruangan')
            ->where('id', '=', $id)
            ->update(['status_pj' => 'Rejected']);

        return redirect('admin/pemesanan-ruangan');
    }

    public function deletelist(Request $request, $id)
    {
        $pemesananRuangan = $this->findOrFail($id);

        // Delete data
        $deleted = $pemesananRuangan->delete();
        if (!$deleted) {
            $message = 'Something went wrong when delete Pemesanan Ruangan';
            return back()->with('danger', $message);
        }

        $message = 'Pemesanan Ruangan has been deleted!';
        return redirect('/listpeminjamanruang')->with('info', $message);
    }

    /**
     * Setup FormModel
     *
     * @param  App\Models\PemesananRuangan $pemesananRuangan
     * @return LaraSpells\FormModel\FormModel
     */
    protected function form(PemesananRuangan $pemesananRuangan)
    {
        return FormModel::make($pemesananRuangan, [
            'no_pemesanan_ruangan' => [
                'input' => "text",
                'label' => "No Pemesanan Ruangan",
                'maxlength' => "255",
                'rules' => [
                    "required",
                    "max:255"
                ]
            ],
            'pemohon' => [
                'input' => "select",
                'label' => "Pemohon",
                'options' => $this->getPemohon(),
                'rules' => [
                    "required"
                ]
            ],
            'tanggal' => [
                'input' => "datepicker",
                'label' => "Tanggal",
                'rules' => [
                    "required",
                ]
            ],
            'nama_acara' => [
                'input' => "text",
                'label' => "Nama Acara",
                'maxlength' => "255",
                'rules' => [
                    "required",
                    "max:255"
                ]
            ],
            'waktu_awal' => [
                'input' => "timepicker",
                'label' => "Waktu Awal",
                'rules' => [
                    "required",
                ]
            ],
            'waktu_akhir' => [
                'input' => "timepicker",
                'label' => "Waktu Akhir",
                'rules' => [
                    "required",
                ]
            ],
            'jumlah_peserta' => [
                'input' => "number",
                'label' => "Jumlah Peserta",
                'maxlength' => "255",
                'rules' => [
                    "required",
                    "max:255"
                ]
            ],
            'id_ruang' => [
                'input' => "select",
                'label' => "Id Ruang",
                'options' => $this->getRuangan(),
                'rules' => [
                    "required"
                ]
            ],
            'attachment' => [
                'input' => "file",
                'label' => "Attachment",
                'delete_old_file' => false,
                'upload_disk' => "uploads",
                'upload_path' => "pemesanan_ruangan\/attachment",
                'rules' => [
                    "max:2048"
                ]
            ],
            'keterangan' => [
                'input' => "textarea",
                'label' => "Keterangan",
                'maxlength' => "255",
                'rules' => [
                    "required",
                    "max:255"
                ]
            ],
            // 'status_supervisor' => [
            //     'input' => "select",
            //     'label' => "Status Supervisor",
            //     'options' => [
            //         [
            //             'label' => 'Pending',
            //             'value' => 'Pending'
            //         ],
            //         [
            //             'label' => 'Rejected',
            //             'value' => 'Rejected'
            //         ],
            //         [
            //             'label' => 'Approved',
            //             'value' => 'Approved'
            //         ]
            //     ],
            //     'rules' => [
            //         "required",
            //     ]
            // ],
            // 'status_manajer' => [
            //     'input' => "select",
            //     'label' => "Status Manajer",
            //     'options' => [
            //         [
            //             'label' => 'Pending',
            //             'value' => 'Pending'
            //         ],
            //         [
            //             'label' => 'Rejected',
            //             'value' => 'Rejected'
            //         ],
            //         [
            //             'label' => 'Approved',
            //             'value' => 'Approved'
            //         ]
            //     ],
            //     'rules' => [
            //         "required",
            //     ]
            // ],
            'status_pj' => [
                'input' => "select",
                'label' => "Status Penanggung Jawab",
                'options' => [
                    [
                        'label' => 'Pending',
                        'value' => 'Pending'
                    ],
                    [
                        'label' => 'Rejected',
                        'value' => 'Rejected'
                    ],
                    [
                        'label' => 'Approved',
                        'value' => 'Approved'
                    ]
                ],
                'rules' => [
                    "required",
                ]
            ],
        ])->withViewData([
            // phpcs:ignore
            'before_button_save' => '<a class="btn btn-default" href="'.route('admin::pemesanan-ruangan.page-list').'"><i class="fa fa-chevron-left"></i> Cancel</a>&nbsp;',
        ]);
    }

           /**
     * Get ID Ruang
     *
     * @return array
     */
    protected function getRuangan()
    {
        return $this->ruang
            ->select(['id as value', \DB::raw('concat(id, " - ", nama_ruang) as label')])
            ->get()
            ->toArray();
    }

    protected function getPemohon()
    {
        return $this->karyawan
            ->select(['nama as value', 'nama as label'])
            ->get()
            ->toArray();
    }
}
