<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Setting;
use Illuminate\Http\Request;
use LaraSpells\FormModel\FormModel;

/**
 * Generated by LaraSpell
 *
 * @author  Ditama Digital <info@ditamadigtal.co.id>
 * @created Thu, 21 Feb 2019 11:28:00 +0000
 */
class SettingController extends Controller
{

    /**
     * Setting model
     *
     * @var App\Models\Setting
     */
    protected $setting;

    /**
     * Constructor
     *
     * @param  App\Models\Setting $setting
     * @return void
     */
    public function __construct(Setting $setting)
    {
        $this->setting = $setting;
    }

    /**
     * Display list setting
     *
     * @param  Illuminate\Http\Request $request
     * @return Illuminate\Http\Response
     */
    public function pageList(Request $request)
    {
        $limit = (int) $request->get('limit') ?: 10;
        $keyword = $request->get('keyword');

        $query = $this->setting->query();
        $query->select([
            "id",
            "key",
            "value"
        ]);

        if ($keyword) {
            $query->where(function ($query) use ($keyword) {
                $query->where('key', 'like', "%{$keyword}%");
                $query->orWhere('value', 'like', "%{$keyword}%");
            });
        }

        $data['title'] = 'List Setting';
        $data['pagination'] = $query->paginate($limit);

        return view('admin::setting.page-list', $data);
    }

    /**
     * Show detail setting
     *
     * @param  Illuminate\Http\Request $request
     * @param  string $id
     * @return Illuminate\Http\Response
     */
    public function pageDetail(Request $request, $id)
    {
        $setting = $this->findOrFail($id);

        $data['title'] = 'Detail Setting';
        $data['setting'] = $setting;

        return view('admin::setting.page-detail', $data);
    }

    /**
     * Display form create setting
     *
     * @param  Illuminate\Http\Request $request
     * @return Illuminate\Http\Response
     */
    public function formCreate(Request $request)
    {
        $data['title'] = 'Form Create Setting';
        $data['form'] = $this->form(new Setting)->withAction(route('admin::setting.post-create'));

        return view('admin::setting.form-create', $data);
    }

    /**
     * Insert new setting
     *
     * @param  Illuminate\Http\Request $request
     * @return Illuminate\Http\Response
     */
    public function postCreate(Request $request)
    {
        $this->form(new Setting)->submit($request);

        $message = 'Setting has been created!';
        return redirect()->route('admin::setting.page-list')->with('info', $message);
    }

    /**
     * Display form edit setting
     *
     * @param  Illuminate\Http\Request $request
     * @param  string $id
     * @return Illuminate\Http\Response
     */
    public function formEdit(Request $request, $id)
    {
        $setting = $this->findOrFail($id);

        $data['title'] = 'Form Edit Setting';
        $data['form'] = $this->form($setting)->withAction(route('admin::setting.post-edit', [$id]));

        return view('admin::setting.form-edit', $data);
    }

    /**
     * Update specified setting
     *
     * @param  Illuminate\Http\Request $request
     * @param  string $id
     * @return Illuminate\Http\Response
     */
    public function postEdit(Request $request, $id)
    {
        $setting = $this->findOrFail($id);

        $this->form($setting)->submit($request);

        $message = 'Setting has been updated!';
        return redirect()->route('admin::setting.page-list')->with('info', $message);
    }

    /**
     * Delete specified setting
     *
     * @param  Illuminate\Http\Request $request
     * @param  string $id
     * @return Illuminate\Http\Response
     */
    public function delete(Request $request, $id)
    {
        $setting = $this->findOrFail($id);

        // Delete data
        $deleted = $setting->delete();
        if (!$deleted) {
            $message = 'Something went wrong when delete Setting';
            return back()->with('danger', $message);
        }

        $message = 'Setting has been deleted!';
        return redirect()->route('admin::setting.page-list')->with('info', $message);
    }

    /**
     * Find setting by 'id' or display 404 if not exists
     *
     * @return Illuminate\Http\Response
     */
    protected function findOrFail($id)
    {
        $setting = $this->setting->find($id);
        if (!$setting) {
            return abort(404, 'Setting not found');
        }

        return $setting;
    }

    /**
     * Setup FormModel
     *
     * @param  App\Models\Setting $setting
     * @return LaraSpells\FormModel\FormModel
     */
    protected function form(Setting $setting)
    {
        return FormModel::make($setting, [
            'key' => [
                'input' => "text",
                'label' => "Key",
                'maxlength' => "255",
                'rules' => [
                    "required",
                    "max:255"
                ]
            ],
            'value' => [
                'input' => "text",
                'label' => "Value",
                'maxlength' => "255",
                'rules' => [
                    "required",
                    "max:255"
                ]
            ]
        ])->withViewData([
            // phpcs:ignore
            'before_button_save' => '<a class="btn btn-default" href="'.route('admin::setting.page-list').'"><i class="fa fa-chevron-left"></i> Cancel</a>&nbsp;',
        ]);
    }
}
